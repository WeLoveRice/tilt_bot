# Install Packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(readtext, RPostgres, jsonlite, curl, data.table, dplyr)
# Set file location as wd
current_dir <- dirname(parent.frame(2)$ofile)
setwd(current_dir)
# import variables from .env
dotenv_df <- read.table(file=paste0(getwd(),"/.env"),header=FALSE,
sep='=',col.names=c('Key','Value'),
stringsAsFactors = FALSE)
dotenv_dt <- data.table(dotenv_df, key="Key")
# set postgres details from .env variables
pg_user <- dotenv_dt['pg_user']$Value
pg_pw <- dotenv_dt['pg_pw']$Value
pg_ip <- dotenv_dt['pg_ip']$Value
pg_db <- dotenv_dt['pg_db']$Value
# user-specified variables
riot_api_key <- dotenv_dt['riot_api']$Value
summoners_list <- as.list(strsplit(dotenv_dt['list_summoners']$Value, ",")[[1]])
rm(dotenv_df,dotenv_dt)
# create connection to postgres
pg_con <- dbConnect(Postgres(),
user = pg_user,
password = pg_pw,
host = pg_ip,
dbname = pg_db,
bigint = "numeric")
# function to update database given summoner_name and api_key
update_summoner_data <- function(summoner_name, api_key){
# url address for api call to get summoner_id from summoner_name
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/",
summoner_name,
"?api_key=",
api_key)
# import api response as dataframe, creating summoner_id
summoner_name_data <- fromJSON(url_address)
summoner_id <- summoner_name_data$id
rm(summoner_name_data)
# url address for api call to get summoner_data using summoner_id
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/league/v4/entries/by-summoner/",
summoner_id,
"?api_key=",
api_key)
# import api repsonse as dataframe summoner_data
summoner_data <- fromJSON(url_address, simplifyVector = TRUE, simplifyDataFrame = TRUE)
# filter data for Ranked Solo/Duo only
summoner_data <- filter(summoner_data, queueType == "RANKED_SOLO_5x5")
# add date / time columns - had issues using POSIXct on postgres, update in future
summoner_data$date <- format(Sys.Date(), format = "%Y%m%d")
summoner_data$time <- format(Sys.time(), format = "%H%M")
# Create output_data dataframe from summoner_data
output_data <- data.frame(
summoner_data$summonerName,
summoner_data$tier,
summoner_data$rank,
summoner_data$leaguePoints,
summoner_data$wins,
summoner_data$losses,
summoner_data$date,
summoner_data$time,
stringsAsFactors=FALSE)
# remove summoner_data
rm(summoner_data)
# set colnames for output_data
colnames(output_data) <- c("summoner_name", "tier", "rank", "LP", "wins", "losses", "date", "time")
# append entry to ranked_data table on postgres
dbWriteTable(pg_con, "ranked_data", output_data, append = TRUE)
}# end of update_summoner_data() function
# loop through each summoner on list updating database with info
for (summoner in summoners_list){
update_summoner_data(summoner, riot_api_key)
}
# SQL Query to get data for today
query_string <- '
SELECT
"summoner_name",
"tier",
"rank",
"LP",
"wins",
"losses",
"time"
FROM
ranked_data
WHERE
"date" = (
Select
MAX("date")
FROM
ranked_data)
;'
# import SQL query as aggregate data, data shown for every summoner for today
aggregate_data <- dbGetQuery(pg_con, query_string)
# loop through each unique summoner_name in aggregate_data
for (summoner in unique(aggregate_data$summoner_name)){
# filter data for current summoner_name
summoner_data <- filter(aggregate_data, summoner_name == summoner)
# create dataframe for daily_update table
update_data <- data.frame(
summoner_name = summoner,
wins = filter(summoner_data, time == max(time))$wins - filter(summoner_data, time == min(time))$wins,
losses = filter(summoner_data, time == max(time))$losses - filter(summoner_data, time == min(time))$losses,
LP_change = filter(summoner_data, time == max(time))$LP - filter(summoner_data, time == min(time))$LP,
tier = unique(summoner_data$tier),
rank = unique(summoner_data$rank),
current_LP = filter(summoner_data, time == max(time))$LP
)
# if daily_update variable exists, use rbind to combine with update_data
if (exists("daily_update")){
daily_update <- rbind(daily_update, update_data)
# else create daily_update from update_data
} else{
daily_update <- update_data
}
rm(update_data,summoner_data)
}# end of for loop
# remove aggregate_data
rm(aggregate_data)
# tilt glen?
# SQL Query to get current loss_counter
query_string <-'
SELECT
*
FROM
daily_loss_counter;'
# return single value dataframe
counter <- dbGetQuery(pg_con, query_string)
# glen daily losses
losses_today <- filter(daily_update, summoner_name == 'Phoenix MT')$losses
# if losses from daily_update greater than counter from postgres
# run tilt_glen python script to message discord
if (losses_today > counter$losses){
system("C:/Users/joemc/Desktop/league_data/tilt_glen.bat")
}
# update loss counter on postgres
loss_counter = as.data.frame(filter(daily_update, summoner_name == 'Phoenix MT')$losses)
colnames(loss_counter) = "losses"
dbWriteTable(pg_con, "daily_loss_counter", loss_counter, overwrite = TRUE)
# update daily table on postgres
dbWriteTable(pg_con, "daily_update", daily_update, overwrite = TRUE)
# disconnect postgres connection
dbDisconnect(pg_con)
source('C:/Users/joemc/Desktop/Local Repos/tilt_bot/ranked_update.R')
# Install Packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(RPostgres, jsonlite, curl, data.table, dplyr)
# import variables from .env
dotenv_df <- read.table(file=paste0(".env"),header=FALSE,
sep='=',col.names=c('Key','Value'),
stringsAsFactors = FALSE)
dotenv_dt <- data.table(dotenv_df, key="Key")
# set postgres details from .env variables
pg_user <- dotenv_dt['pg_user']$Value
pg_pw <- dotenv_dt['pg_pw']$Value
pg_ip <- dotenv_dt['pg_ip']$Value
pg_db <- dotenv_dt['pg_db']$Value
# user-specified variables
riot_api_key <- dotenv_dt['riot_api']$Value
summoners_list <- as.list(strsplit(dotenv_dt['list_summoners']$Value, ",")[[1]])
rm(dotenv_df,dotenv_dt)
# create connection to postgres
pg_con <- dbConnect(Postgres(),
user = pg_user,
password = pg_pw,
host = pg_ip,
dbname = pg_db,
bigint = "numeric")
# function to update database given summoner_name and api_key
update_summoner_data <- function(summoner_name, api_key){
# url address for api call to get summoner_id from summoner_name
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/",
summoner_name,
"?api_key=",
api_key)
# import api response as dataframe, creating summoner_id
summoner_name_data <- fromJSON(url_address)
summoner_id <- summoner_name_data$id
rm(summoner_name_data)
# url address for api call to get summoner_data using summoner_id
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/league/v4/entries/by-summoner/",
summoner_id,
"?api_key=",
api_key)
# import api repsonse as dataframe summoner_data
summoner_data <- fromJSON(url_address, simplifyVector = TRUE, simplifyDataFrame = TRUE)
# filter data for Ranked Solo/Duo only
summoner_data <- filter(summoner_data, queueType == "RANKED_SOLO_5x5")
# add date / time columns - had issues using POSIXct on postgres, update in future
summoner_data$date <- format(Sys.Date(), format = "%Y%m%d")
summoner_data$time <- format(Sys.time(), format = "%H%M")
# Create output_data dataframe from summoner_data
output_data <- data.frame(
summoner_data$summonerName,
summoner_data$tier,
summoner_data$rank,
summoner_data$leaguePoints,
summoner_data$wins,
summoner_data$losses,
summoner_data$date,
summoner_data$time,
stringsAsFactors=FALSE)
# remove summoner_data
rm(summoner_data)
# set colnames for output_data
colnames(output_data) <- c("summoner_name", "tier", "rank", "LP", "wins", "losses", "date", "time")
# append entry to ranked_data table on postgres
dbWriteTable(pg_con, "ranked_data", output_data, append = TRUE)
}# end of update_summoner_data() function
# loop through each summoner on list updating database with info
for (summoner in summoners_list){
update_summoner_data(summoner, riot_api_key)
}
# function to update database given summoner_name and api_key
update_summoner_data <- function(summoner_name, api_key){
# url address for api call to get summoner_id from summoner_name
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/",
summoner_name,
"?api_key=",
api_key)
# import api response as dataframe, creating summoner_id
summoner_name_data <- fromJSON(url_address)
summoner_id <- summoner_name_data$id
rm(summoner_name_data)
# url address for api call to get summoner_data using summoner_id
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/league/v4/entries/by-summoner/",
summoner_id,
"?api_key=",
api_key)
# import api repsonse as dataframe summoner_data
summoner_data <- fromJSON(url_address, simplifyVector = TRUE, simplifyDataFrame = TRUE)
# filter data for Ranked Solo/Duo only
summoner_data <- filter(summoner_data, queueType == "RANKED_SOLO_5x5")
# add date / time columns - had issues using POSIXct on postgres, update in future
summoner_data$date <- format(Sys.Date(), format = "%Y%m%d")
summoner_data$time <- format(Sys.time(), format = "%H%M")
# Create output_data dataframe from summoner_data
output_data <- data.frame(
summoner_data$summonerName,
summoner_data$tier,
summoner_data$rank,
summoner_data$leaguePoints,
summoner_data$wins,
summoner_data$losses,
summoner_data$date,
summoner_data$time,
stringsAsFactors=FALSE)
# remove summoner_data
#rm(summoner_data)
# set colnames for output_data
colnames(output_data) <- c("summoner_name", "tier", "rank", "LP", "wins", "losses", "date", "time")
# append entry to ranked_data table on postgres
dbWriteTable(pg_con, "ranked_data", output_data, append = TRUE)
}# end of update_summoner_data() function
# loop through each summoner on list updating database with info
for (summoner in summoners_list){
update_summoner_data(summoner, riot_api_key)
}
View(summoners_list)
View(pg_con)
# function to update database given summoner_name and api_key
update_summoner_data <- function(summoner_name, api_key){
# url address for api call to get summoner_id from summoner_name
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/summoner/v4/summoners/by-name/",
summoner_name,
"?api_key=",
api_key)
# import api response as dataframe, creating summoner_id
summoner_name_data <- fromJSON(url_address)
summoner_id <- summoner_name_data$id
rm(summoner_name_data)
# url address for api call to get summoner_data using summoner_id
url_address <- paste0(
"https://euw1.api.riotgames.com/lol/league/v4/entries/by-summoner/",
summoner_id,
"?api_key=",
api_key)
# import api repsonse as dataframe summoner_data
summoner_data <- fromJSON(url_address, simplifyVector = TRUE, simplifyDataFrame = TRUE)
# filter data for Ranked Solo/Duo only
summoner_data <- filter(summoner_data, queueType == "RANKED_SOLO_5x5")
# add date / time columns - had issues using POSIXct on postgres, update in future
summoner_data$date <- format(Sys.Date(), format = "%Y%m%d")
summoner_data$time <- format(Sys.time(), format = "%H%M")
# Create output_data dataframe from summoner_data
output_data <- data.frame(
summoner_data$summonerName,
summoner_data$tier,
summoner_data$rank,
summoner_data$leaguePoints,
summoner_data$wins,
summoner_data$losses,
summoner_data$date,
summoner_data$time,
stringsAsFactors=FALSE)
# remove summoner_data
#rm(summoner_data)
# set colnames for output_data
colnames(output_data) <- c("summoner_name", "tier", "rank", "LP", "wins", "losses", "date", "time")
print(output_data)
# append entry to ranked_data table on postgres
dbWriteTable(pg_con, "ranked_data", output_data, append = TRUE)
}# end of update_summoner_data() function
# loop through each summoner on list updating database with info
for (summoner in summoners_list){
update_summoner_data(summoner, riot_api_key)
}
